CREATE TABLE RegistrarRestaurante (
  id_restaurante VARCHAR2(50),
  Direccion VARCHAR2(255),
  Municipio VARCHAR2(50),
  Zona NUMBER(10,0) CHECK(Zona >= 0),
  Telefono NUMBER(20,0),
  Personal NUMBER(10,0),
  TieneParqueo NUMBER(1,0) CHECK(TieneParqueo IN (0,1))
);

CREATE TABLE RegistrarPuesto (
  id_puesto NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR2(50) NOT NULL,
  descripcion VARCHAR2(100) NOT NULL,
  salario NUMBER(10,2) CHECK (salario > 0) NOT NULL
);



CREATE TABLE CrearEmpleado (
  id_empleado NUMBER(8) GENERATED ALWAYS AS IDENTITY,
  Nombres VARCHAR2(50) NOT NULL,
  Apellidos VARCHAR2(50) NOT NULL,
  Fecha_nacimiento DATE NOT NULL,
  Correo VARCHAR2(50) NOT NULL,
  Telefono NUMBER(10) NOT NULL,
  Direccion VARCHAR2(100) NOT NULL,
  Numero_DPI NUMBER(20) NOT NULL,
  Puesto NUMBER(8) NOT NULL,
  Fecha_inicio DATE NOT NULL,
  IdRestaurante VARCHAR2(10) NOT NULL,
  CONSTRAINT pk_CrearEmpleado PRIMARY KEY (id_empleado)
);


CREATE TABLE RegistrarCliente (
    Numero_DPI NUMBER(20) PRIMARY KEY,
    Nombre VARCHAR2(50) NOT NULL,
    Apellidos VARCHAR2(50) NOT NULL,
    Fecha_Nacimiento DATE NOT NULL,
    Correo VARCHAR2(50) NOT NULL,
    Telefono NUMBER(10) NOT NULL,
    NIT NUMBER(20)
);



 
  CREATE TABLE "SYSTEM"."REGISTRARDIRECCION" 
   (	"NUMERO_DPI" NUMBER(19,0) NOT NULL ENABLE, 
	"DIRECCION" VARCHAR2(100 BYTE) NOT NULL ENABLE, 
	"MUNICIPIO" VARCHAR2(50 BYTE) NOT NULL ENABLE, 
	"ZONA" NUMBER(10,0) NOT NULL ENABLE, 
	"ID_DIRECCION" NUMBER(*,0) NOT NULL ENABLE, 
	 CONSTRAINT "PK_REGISTRARDIRECCION" PRIMARY KEY ("ID_DIRECCION")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE, 
	 CONSTRAINT "FK_REGISTRARDIRECCION_CLIENTE" FOREIGN KEY ("NUMERO_DPI")
	  REFERENCES "SYSTEM"."REGISTRARCLIENTE" ("NUMERO_DPI") ENABLE
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;


  


 CREATE TABLE CrearOrden (
  Id_Orden NUMBER GENERATED ALWAYS AS IDENTITY,
  numero_dpi NUMBER NOT NULL,
  Id_Direccion NUMBER NOT NULL,
  Canal CHAR(1) NOT NULL CHECK (Canal IN ('L', 'A')),
  FechaInicio DATE DEFAULT SYSDATE,
  FechaEntrega DATE,
  Estado VARCHAR2(20) DEFAULT 'INICIADA',
  Id_Restaurante NUMBER,
  CONSTRAINT pk_CrearOrden PRIMARY KEY (Id_Orden),
  CONSTRAINT fk_CrearOrden_Cliente FOREIGN KEY (numero_dpi) REFERENCES RegistrarCliente(numero_dpi),
  CONSTRAINT fk_CrearOrden_Direccion FOREIGN KEY (Id_Direccion) REFERENCES REGISTRARDIRECCION(Id_Direccion),
  CONSTRAINT fk_CrearOrden_Restaurante FOREIGN KEY (Id_restaurante) REFERENCES RegistrarRestaurante(Id_restaurante)
);



CREATE TABLE AgregarItem (
  Id_Orden NUMBER,
  TipoProducto CHAR(1),
  Producto NUMBER,
  Cantidad NUMBER,
  Observacion VARCHAR2(255),
  CONSTRAINT pk_agregaritem PRIMARY KEY (Id_Orden, TipoProducto, Producto),
  CONSTRAINT fk_agregaritem_orden FOREIGN KEY (Id_Orden) REFERENCES crearOrden (Id_Orden),
  CONSTRAINT ck_agregaritem_tipoproducto CHECK (TipoProducto IN ('C', 'E', 'B', 'P')),
  CONSTRAINT ck_agregaritem_producto_combo CHECK (TipoProducto = 'C' AND Producto BETWEEN 1 AND 6),
  CONSTRAINT ck_agregaritem_producto_extra CHECK (TipoProducto = 'E' AND Producto BETWEEN 1 AND 3),
  CONSTRAINT ck_agregaritem_producto_bebida CHECK (TipoProducto = 'B' AND Producto BETWEEN 1 AND 5),
  CONSTRAINT ck_agregaritem_producto_postre CHECK (TipoProducto = 'P' AND Producto BETWEEN 1 AND 4),
  CONSTRAINT ck_agregaritem_cantidad_positive CHECK (Cantidad > 0),
  CONSTRAINT ck_agregaritem_estado_valido CHECK ((SELECT Estado FROM CrearOrden WHERE Id_Orden = AgregarItem.Id_Orden) IN ('INICIADA', 'AGREGANDO'))
);



CREATE TABLE ConfirmarOrden (
  Id_Orden NUMBER,
  FormaPago CHAR(1),
  Id_empleado NUMBER,
  CONSTRAINT pk_confirmarorden PRIMARY KEY (Id_Orden),
  CONSTRAINT fk_confirmarorden_orden FOREIGN KEY (Id_Orden) REFERENCES crearOrden (Id_Orden),
  CONSTRAINT fk_confirmarorden_repartidor FOREIGN KEY (Id_empleado) REFERENCES crearempleado (Id_empleado),
  CONSTRAINT ck_confirmarorden_estado_valido CHECK ((SELECT Estado FROM crearOrden WHERE Id_Orden = ConfirmarOrden.Id_Orden) = 'EN CAMINO'),
  CONSTRAINT ck_confirmarorden_formapago CHECK (FormaPago IN ('E', 'T'))
);




drop table confirmarOrden;
drop table agregaritem;
drop table crearorden;
drop table registrardireccion;
drop table RegistrarCliente;
drop table CrearEmpleado;
drop table RegistrarPuesto;
drop table RegistrarRestaurante;

--VALIDAR COBERTURA 
CREATE OR REPLACE PROCEDURE ValidarCoberturaOrden (
    p_idorden IN NUMBER,
    p_municipio IN VARCHAR2,
    p_zona IN VARCHAR2,
    o_error OUT VARCHAR2
) IS
    v_idrestaurante NUMBER;
BEGIN
    -- Validar si existe un restaurante en la misma zona y municipio que la dirección del cliente
    SELECT idrestaurante INTO v_idrestaurante
    FROM Restaurantes
    WHERE municipio = p_municipio AND zona = p_zona;
    
    -- Si se encontró un restaurante, actualizar el estado de la orden a "PENDIENTE"
    UPDATE Ordenes
    SET estado = 'PENDIENTE', idrestaurante = v_idrestaurante
    WHERE idorden = p_idorden;
    
    -- Si no se encontró un restaurante, actualizar el estado de la orden a "SIN COBERTURA"
    IF v_idrestaurante IS NULL THEN
        UPDATE Ordenes
        SET estado = 'SIN COBERTURA'
        WHERE idorden = p_idorden;
        o_error := 'No hay cobertura en el área de entrega.';
    ELSE
        o_error := NULL;
    END IF;
END;


--FACTURA
CREATE OR REPLACE FUNCTION generar_encabezado_factura(
  p_id_orden IN NUMBER,
  p_monto_total IN NUMBER,
  p_lugar IN VARCHAR2,
  p_nit_cliente IN VARCHAR2,
  p_forma_pago IN CHAR
) RETURN VARCHAR2
AS
  v_numero_serie VARCHAR2(20);
  v_fecha_actual DATE;
BEGIN
  -- Generar número de serie concatenando año en curso e id de la orden
  SELECT TO_CHAR(SYSDATE, 'YYYY') || p_id_orden INTO v_numero_serie FROM DUAL;

  -- Obtener fecha y hora actual
  v_fecha_actual := SYSDATE;

  -- Construir encabezado de factura
  RETURN 'Número de serie: ' || v_numero_serie || CHR(10) ||
         'Monto total: Q' || TO_CHAR(p_monto_total, '999,999,990.00') || CHR(10) ||
         'Lugar: ' || p_lugar || CHR(10) ||
         'Fecha y hora: ' || TO_CHAR(v_fecha_actual, 'DD/MM/YYYY HH24:MI:SS') || CHR(10) ||
         'Id de la orden: ' || p_id_orden || CHR(10) ||
         'NIT del cliente: ' || COALESCE(p_nit_cliente, 'C/F') || CHR(10) ||
         'Forma de pago: ' || CASE p_forma_pago WHEN 'E' THEN 'Efectivo' ELSE 'Tarjeta de débito o crédito' END;
END;
/


